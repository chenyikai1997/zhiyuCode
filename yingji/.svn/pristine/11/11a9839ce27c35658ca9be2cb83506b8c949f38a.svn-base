package com.fh.util;

import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.util.*;
import java.io.File;
import java.io.FileInputStream;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

public class objectExcelReadPic {
    /**
     * @param filepath //文件路径
     * @param filename //文件名
     * @param startrow //开始行号
     * @param startcol //开始列号
     * @param sheetnum //sheet
     * @return list
     */
    public static List<Object> readExcel(String filepath, String filename, int startrow, int startcol, int sheetnum) {
        List<Object> varList = new ArrayList<Object>();

        try {
            File target = new File(filepath, filename);
            FileInputStream fi = new FileInputStream(target);
            Workbook wb = WorkbookFactory.create(fi);
            Sheet sheet = wb.getSheetAt(sheetnum); 					//sheet 从0开始
            int rowNum = sheet.getLastRowNum() + 1; 					//取得最后一行的行号

            Row firstRow = sheet.getRow(startrow);

            Cell firstCell = firstRow.getCell(0);
            if(firstCell.getStringCellValue().equals("隐患排查表")){
                firstRow = sheet.getRow(1);
                startrow += 2;
            }
            else{
                startrow++;
            }

//            HSSFPatriarch testList = sheet.getDrawingPatriarch();
//            Map<Integer, List<HSSFPictureData>> map = new LinkedHashMap<Integer, List<HSSFPictureData>>();

//            List<HSSFShape> list =  sheet.getDrawingPatriarch().getChildren();
//            for (HSSFShape shape : list) {
//                if (shape instanceof HSSFPicture) {
//                    HSSFPicture picture = (HSSFPicture) shape;
//                    HSSFClientAnchor cAnchor = picture.getClientAnchor();
//                    HSSFPictureData pdata = picture.getPictureData();
//                    int key = cAnchor.getRow1(); // 行号-列号
//                    int key1 = cAnchor.getCol1();
//                    //图片起始位置
//                    int key2 = cAnchor.getDx1();
//                    int key3 = cAnchor.getDy1();
//                    //如果不为空就取出对应行的list然后添加图片
//                    if(map.get(key) != null){
//                        List<HSSFPictureData> mapList = map.get(key);
//                        mapList.add(pdata);
//                        map.put(key,mapList);
//                    }
//                    else{
//                        List<HSSFPictureData> mapList = new LinkedList<>();
//                        mapList.add(pdata);
//                        map.put(key, mapList);
//                    }
//
//                }
//            }
//
//            //存储图片，根据锚点位置
//            Map<Integer, String> picturePath = new LinkedHashMap<Integer, String>();
//            /*String[] picturePath = new String[rowNum];*/
//            for(Map.Entry<Integer, List<HSSFPictureData>> entry : map.entrySet()){
//                List<HSSFPictureData> mapList = entry.getValue();
//                //每一行的图片群
//                for(HSSFPictureData hssfPictureData : mapList){
//                    String UUID = UuidUtil.get32UUID();
//                    String suggestFileExtension = hssfPictureData.suggestFileExtension();// 图片格式
//                    String filePath = String.valueOf(Thread.currentThread().getContextClassLoader().getResource(""))+"../../";	//项目路径
//                    String filep = Const.FILEPATHIMG+UUID+".png";
//                    //加上文件夹路径和文件格式
//                    filePath = (filePath.trim() + Const.FILEPATHIMG+UUID+".png".trim()).substring(6).trim();
//                    //判断该行是否已经插入字符串，如果有的话就在后面加上分隔符
//                    if(picturePath.get(entry.getKey()) != null){
//                        String tempPath = picturePath.get(entry.getKey()) + "," + filep;
//                        picturePath.put(entry.getKey(),tempPath);
//                    }
//                    else{
//                        picturePath.put(entry.getKey(),filep);
//                    }
//                    //将证件照存储路径存放到数组中
//                    Tools.mkdirsmy(PathUtil.getClasspath()+Const.FILEPATHIMG,UUID+".png");		//验证文件路径是否存在该文件
//                    FileOutputStream out = new FileOutputStream(filePath);// 流写入
//                    out.write(hssfPictureData.getData());
//                    out.close();
//                }
//
//            }


            for (int i = startrow; i < rowNum; i++) {					//行循环开始

                PageData varpd = new PageData();
                Row row = sheet.getRow(i); 							//行
                int cellNum = row.getLastCellNum(); 					//每行的最后一个单元格位置

                for (int j = startcol; j < cellNum; j++) {				//列循环开始

                    Cell cell = row.getCell(Short.parseShort(j + ""));
                    String cellValue = null;
                    if (null != cell) {
                        switch (cell.getCellType()) { 					// 判断excel单元格内容的格式，并对其进行转换，以便插入数据库
                            case NUMERIC:
                                DecimalFormat df=new DecimalFormat("0");
                                cellValue=df.format(cell.getNumericCellValue());
                                Calendar calendar = new GregorianCalendar(1900,0,-1);
                                if(cellValue.length() <= 5 && j == 7){
                                    Date date = DateUtil.addDay(calendar.getTime(),Integer.parseInt(cellValue));
                                    cellValue = Tools.date2Str(date,"YYYY-MM-dd");
                                }

                                break;
                            case FORMULA:
                                cellValue = String.valueOf(cell.getNumericCellValue());
                                //cellValue =cell.getCellFormula() + "";
                                break;
                            case STRING:
                                cellValue = cell.getStringCellValue();
                                break;
                            case BOOLEAN:
                                cellValue = cell.getBooleanCellValue() + "";
                                break;
                            case BLANK: //空值
                                cellValue = "";
                            case ERROR:
                                cellValue = "";
                                break;
                        }
                    } else {
                        cellValue = "";
                    }

                    varpd.put("var"+j, cellValue);

                }
//                varpd.put("var"+12, picturePath.get(i));
                varList.add(varpd);
            }

        } catch (Exception e) {
            System.out.println(e);
        }

        return varList;
    }
}
